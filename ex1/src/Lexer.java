<<<<<<< HEAD
// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/LEX_FILE.lex
=======
/* The following code was generated by JFlex 1.7.0 */
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba

/***************************/
/* FILE NAME: LEX_FILE.lex */
/***************************/

/*************/
/* USER CODE */
/*************/
import java_cup.runtime.*;

/******************************/
/* DOLAR DOLAR - DON'T TOUCH! */
/******************************/


<<<<<<< HEAD
// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
=======
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
<<<<<<< HEAD
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\5\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\11\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\4\1\0\32\25\1\6\1\0\1\7"+
    "\3\0\1\26\1\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\25\1\36\1\25\1\37\3\25\1\40"+
    "\1\41\1\42\1\43\1\25\1\44\1\45\1\46\1\25"+
    "\1\47\1\0\1\50\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
=======
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\34\1\33\1\0\1\34\1\32\22\0\1\34\1\36\1\27"+
    "\5\0\1\43\1\44\1\41\1\46\1\47\1\37\1\31\1\40\1\25"+
    "\11\26\1\11\1\1\1\50\1\12\1\51\1\36\1\0\32\30\1\43"+
    "\1\42\1\44\3\0\1\13\1\30\1\15\1\20\1\16\1\24\1\7"+
    "\1\23\1\2\2\30\1\10\1\30\1\3\3\30\1\6\1\5\1\4"+
    "\1\21\1\30\1\22\1\17\1\14\1\30\1\45\1\0\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
<<<<<<< HEAD
    "\3\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\0\1\13\1\14\1\15\1\16"+
    "\11\17\1\20\1\21\1\0\1\22\3\1\1\23\3\17"+
    "\1\24\6\17\1\0\2\1\3\17\1\25\1\26\1\27"+
    "\3\17\1\0\1\30\6\17\1\30\1\31\1\32\3\17"+
    "\1\33\1\17\1\34\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
=======
    "\1\0\1\1\1\2\5\3\1\1\1\4\4\3\2\5"+
    "\1\1\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\3\1\23"+
    "\4\3\1\24\4\3\1\1\1\0\1\25\1\1\1\7"+
    "\1\0\1\26\1\27\1\30\6\3\1\1\1\0\6\3"+
    "\1\0\2\3\1\31\1\32\1\3\1\33\1\34\1\35"+
    "\1\3\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[76];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


<<<<<<< HEAD
  /**
=======
  /** 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\51\0\122\0\173\0\244\0\244\0\315\0\244"+
    "\0\244\0\244\0\244\0\366\0\244\0\u011f\0\u0148\0\244"+
    "\0\244\0\244\0\244\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\244\0\244\0\315\0\244"+
    "\0\244\0\u02e2\0\u030b\0\244\0\u0334\0\u035d\0\u0386\0\u0171"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\u0520\0\u0549\0\u0572\0\u0171\0\u0171\0\u0171\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u02e2\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u04a5\0\u0171\0\u0171\0\u0735\0\u075e\0\u0787"+
    "\0\u0171\0\u07b0\0\u0171\0\u0171\0\u0171";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
=======
    "\0\0\0\52\0\52\0\124\0\176\0\250\0\322\0\374"+
    "\0\u0126\0\52\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\52\0\u0276\0\52\0\52\0\52\0\u02a0\0\52"+
    "\0\52\0\52\0\52\0\52\0\52\0\52\0\52\0\u02ca"+
    "\0\250\0\u02f4\0\u031e\0\u0348\0\u0372\0\52\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u01f8\0\u0444\0\52\0\u046e\0\u0498\0\u04c2"+
    "\0\250\0\250\0\250\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u05e8\0\u0738\0\u0762\0\250\0\250\0\u078c\0\250"+
    "\0\250\0\250\0\u07b6\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[76];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

<<<<<<< HEAD
  /**
=======
  /** 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\2\2\3\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\24"+
    "\1\27\3\24\1\30\1\24\1\31\1\32\1\33\2\24"+
    "\1\34\2\24\1\35\1\36\1\0\3\2\46\0\1\2"+
    "\2\3\4\0\1\37\45\0\1\40\17\0\22\4\70\0"+
    "\1\41\43\0\1\42\4\0\1\43\51\0\2\16\54\0"+
    "\1\44\43\0\2\24\5\0\22\24\20\0\2\24\5\0"+
    "\13\24\1\45\6\24\20\0\2\24\5\0\11\24\1\46"+
    "\10\24\20\0\2\24\5\0\20\24\1\47\1\24\20\0"+
    "\2\24\5\0\5\24\1\50\4\24\1\51\7\24\20\0"+
    "\2\24\5\0\4\24\1\52\3\24\1\53\11\24\20\0"+
    "\2\24\5\0\4\24\1\54\15\24\20\0\2\24\5\0"+
    "\15\24\1\55\4\24\20\0\2\24\5\0\7\24\1\56"+
    "\12\24\2\0\1\57\1\42\2\57\1\42\1\57\2\42"+
    "\1\60\1\42\1\57\5\42\1\57\1\42\3\57\24\42"+
    "\1\0\1\43\1\41\1\61\1\43\1\0\4\43\1\0"+
    "\5\43\1\0\1\43\3\0\24\43\16\0\2\24\5\0"+
    "\13\24\1\62\6\24\20\0\2\24\5\0\1\24\1\63"+
    "\20\24\20\0\2\24\5\0\15\24\1\64\4\24\20\0"+
    "\2\24\5\0\15\24\1\65\4\24\20\0\2\24\5\0"+
    "\17\24\1\66\2\24\20\0\2\24\5\0\11\24\1\67"+
    "\10\24\20\0\2\24\5\0\15\24\1\70\4\24\20\0"+
    "\2\24\5\0\13\24\1\71\6\24\20\0\2\24\5\0"+
    "\10\24\1\72\11\24\2\0\10\57\1\73\41\57\1\42"+
    "\2\57\1\42\1\57\2\42\1\60\1\42\1\57\2\42"+
    "\1\74\2\42\1\57\1\42\3\57\24\42\2\0\1\41"+
    "\64\0\2\24\5\0\1\24\1\75\20\24\20\0\2\24"+
    "\5\0\14\24\1\76\5\24\20\0\2\24\5\0\4\24"+
    "\1\77\15\24\20\0\2\24\5\0\16\24\1\100\3\24"+
    "\20\0\2\24\5\0\10\24\1\101\11\24\20\0\2\24"+
    "\5\0\11\24\1\102\10\24\2\0\10\57\1\73\4\57"+
    "\1\103\33\57\16\0\2\24\5\0\21\24\1\104\20\0"+
    "\2\24\5\0\14\24\1\105\5\24\20\0\2\24\5\0"+
    "\12\24\1\106\7\24\20\0\2\24\5\0\13\24\1\107"+
    "\6\24\20\0\2\24\5\0\12\24\1\110\7\24\20\0"+
    "\2\24\5\0\4\24\1\111\15\24\20\0\2\24\5\0"+
    "\3\24\1\112\16\24\20\0\2\24\5\0\12\24\1\113"+
    "\7\24\20\0\2\24\5\0\6\24\1\114\13\24\20\0"+
    "\2\24\5\0\14\24\1\115\5\24\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2009];
=======
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\6"+
    "\1\11\1\12\1\13\1\6\1\14\1\15\3\6\1\16"+
    "\2\6\1\17\1\20\1\21\1\6\1\22\1\23\2\24"+
    "\1\25\1\0\1\26\1\27\1\30\1\2\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\54\0\1\6\1\40"+
    "\5\6\2\0\11\6\1\41\2\6\1\0\1\6\23\0"+
    "\1\42\6\6\2\0\3\6\1\43\10\6\1\0\1\6"+
    "\23\0\7\6\2\0\14\6\1\0\1\6\23\0\2\6"+
    "\1\44\4\6\2\0\14\6\1\0\1\6\23\0\7\6"+
    "\2\0\3\6\1\45\10\6\1\0\1\6\33\0\1\46"+
    "\41\0\4\6\1\47\2\6\2\0\14\6\1\0\1\6"+
    "\23\0\6\6\1\50\2\0\14\6\1\0\1\6\23\0"+
    "\7\6\2\0\4\6\1\51\7\6\1\0\1\6\23\0"+
    "\7\6\2\0\10\6\1\52\3\6\1\0\1\6\46\0"+
    "\2\53\50\0\2\20\25\0\7\54\2\0\12\54\2\0"+
    "\1\55\1\54\1\56\53\0\1\24\56\0\1\57\1\60"+
    "\12\0\2\6\1\61\4\6\2\0\14\6\1\0\1\6"+
    "\23\0\6\6\1\62\2\0\14\6\1\0\1\6\23\0"+
    "\7\6\2\0\7\6\1\63\4\6\1\0\1\6\23\0"+
    "\4\6\1\64\2\6\2\0\14\6\1\0\1\6\23\0"+
    "\2\6\1\65\4\6\2\0\14\6\1\0\1\6\23\0"+
    "\4\6\1\66\2\6\2\0\14\6\1\0\1\6\23\0"+
    "\7\6\2\0\1\67\13\6\1\0\1\6\23\0\2\6"+
    "\1\70\4\6\2\0\14\6\1\0\1\6\23\0\1\71"+
    "\6\6\2\0\14\6\1\0\1\6\23\0\7\54\2\0"+
    "\12\54\2\0\1\55\1\54\52\0\1\56\21\0\10\57"+
    "\2\0\14\57\1\0\2\57\1\23\1\24\6\57\1\0"+
    "\4\57\3\0\1\2\10\72\2\2\14\72\1\2\11\72"+
    "\1\73\5\72\3\2\2\0\1\74\6\6\2\0\14\6"+
    "\1\0\1\6\23\0\7\6\2\0\6\6\1\75\5\6"+
    "\1\0\1\6\23\0\7\6\2\0\1\76\13\6\1\0"+
    "\1\6\23\0\3\6\1\77\3\6\2\0\14\6\1\0"+
    "\1\6\23\0\7\6\2\0\3\6\1\100\10\6\1\0"+
    "\1\6\23\0\6\6\1\101\2\0\14\6\1\0\1\6"+
    "\22\0\10\102\2\0\14\102\1\0\11\102\1\73\5\102"+
    "\4\0\10\102\2\0\14\102\1\0\10\102\1\24\1\73"+
    "\5\102\5\0\1\6\1\103\5\6\2\0\14\6\1\0"+
    "\1\6\23\0\4\6\1\104\2\6\2\0\14\6\1\0"+
    "\1\6\23\0\7\6\2\0\1\6\1\105\12\6\1\0"+
    "\1\6\23\0\3\6\1\106\3\6\2\0\14\6\1\0"+
    "\1\6\23\0\1\6\1\107\5\6\2\0\14\6\1\0"+
    "\1\6\23\0\7\6\2\0\3\6\1\110\10\6\1\0"+
    "\1\6\23\0\5\6\1\111\1\6\2\0\14\6\1\0"+
    "\1\6\23\0\1\6\1\112\5\6\2\0\14\6\1\0"+
    "\1\6\23\0\7\6\2\0\5\6\1\113\6\6\1\0"+
    "\1\6\23\0\3\6\1\114\3\6\2\0\14\6\1\0"+
    "\1\6\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2016];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


<<<<<<< HEAD
  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
=======
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
<<<<<<< HEAD
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
=======
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< HEAD
    "\3\1\1\0\2\11\1\1\4\11\1\1\1\11\1\1"+
    "\1\0\4\11\11\1\2\11\1\0\2\11\2\1\1\11"+
    "\12\1\1\0\13\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
=======
    "\1\0\2\11\6\1\1\11\7\1\1\11\1\1\3\11"+
    "\1\1\10\11\6\1\1\11\5\1\1\0\1\11\2\1"+
    "\1\0\12\1\1\0\6\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[76];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

<<<<<<< HEAD
  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;
=======
  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba

  /* user code: */
	/*********************************************************************************/
	/* Create a new java_cup.runtime.Symbol with information about the current token */
	/*********************************************************************************/
	private Symbol symbol(int type)               {return new Symbol(type, yyline, yycolumn);}
	private Symbol symbol(int type, Object value) {return new Symbol(type, yyline, yycolumn, value);}

	/*******************************************/
	/* Enable line number extraction from main */
	/*******************************************/
	public int getLine() { return yyline + 1; } 

	/**********************************************/
	/* Enable token position extraction from main */
	/**********************************************/
	public int getTokenStartPosition() { return yycolumn + 1; } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

<<<<<<< HEAD
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
=======

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
<<<<<<< HEAD
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
=======
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
<<<<<<< HEAD
      char newBuffer[] = new char[zzBuffer.length * 2];
=======
      char newBuffer[] = new char[zzBuffer.length*2];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
<<<<<<< HEAD
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
=======
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

<<<<<<< HEAD

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
=======
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  }


  /**
   * Resets the scanner to read from a new input stream.
<<<<<<< HEAD
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
=======
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  }


  /**
   * Returns the current lexical state.
<<<<<<< HEAD
   *
   * @return the current lexical state.
=======
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
<<<<<<< HEAD
   * Enters a new lexical state.
=======
   * Enters a new lexical state
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
<<<<<<< HEAD
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
=======
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  }


  /**
<<<<<<< HEAD
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
=======
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
  }


  /**
<<<<<<< HEAD
   * How many characters were matched.
   *
   * @return the length of the matched text region.
=======
   * Returns the length of the matched text region.
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
<<<<<<< HEAD
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
=======
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
<<<<<<< HEAD
  }
=======
  } 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
<<<<<<< HEAD
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
=======
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
<<<<<<< HEAD
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
=======
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
<<<<<<< HEAD
    char[] zzBufferL = zzBuffer;
=======
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
<<<<<<< HEAD
        // peek one character ahead if it is
        // (if we have counted one line too much)
=======
        // peek one character ahead if it is \n (if we have counted one line too much)
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
<<<<<<< HEAD
          if (eof)
            zzPeek = false;
          else
=======
          if (eof) 
            zzPeek = false;
          else 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
<<<<<<< HEAD

=======
  
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
<<<<<<< HEAD

=======
    
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
<<<<<<< HEAD
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
=======
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(TokenNames.EOF);
            }  // fall though
<<<<<<< HEAD
            case 78: break;
=======
            case 77: break;
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
            default:
          { return new java_cup.runtime.Symbol(TokenNames.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
<<<<<<< HEAD
          case 1:
            { /* ignore */
            }
            // fall through
          case 31: break;
          case 2:
            { return symbol(TokenNames.LPAREN);
            }
            // fall through
          case 32: break;
          case 3:
            { return symbol(TokenNames.RPAREN);
            }
            // fall through
          case 33: break;
          case 4:
            { return symbol(TokenNames.TIMES);
            }
            // fall through
          case 34: break;
          case 5:
            { return symbol(TokenNames.PLUS);
            }
            // fall through
          case 35: break;
          case 6:
            { return symbol(TokenNames.COMMA);
            }
            // fall through
          case 36: break;
          case 7:
            { return symbol(TokenNames.MINUS);
            }
            // fall through
          case 37: break;
          case 8:
            { return symbol(TokenNames.DOT);
            }
            // fall through
          case 38: break;
          case 9:
            { return symbol(TokenNames.DIVIDE);
            }
            // fall through
          case 39: break;
          case 10:
            { return symbol(TokenNames.INT, new Integer(yytext()));
            }
            // fall through
          case 40: break;
          case 11:
            { return symbol(TokenNames.SEMICOLON);
            }
            // fall through
          case 41: break;
          case 12:
            { return symbol(TokenNames.LT);
            }
            // fall through
          case 42: break;
          case 13:
            { return symbol(TokenNames.EQ);
            }
            // fall through
          case 43: break;
          case 14:
            { return symbol(TokenNames.GT);
            }
            // fall through
          case 44: break;
          case 15:
            { return symbol(TokenNames.ID,     new String( yytext()));
            }
            // fall through
          case 45: break;
          case 16:
            { return symbol(TokenNames.LBRACE);
            }
            // fall through
          case 46: break;
          case 17:
            { return symbol(TokenNames.RBRACE);
            }
            // fall through
          case 47: break;
          case 18:
            { return symbol(TokenNames.STRING, new String(yytext()));
            }
            // fall through
          case 48: break;
          case 19:
            { return symbol(TokenNames.ASSIGN);
            }
            // fall through
          case 49: break;
          case 20:
            { return symbol(TokenNames.IF);
            }
            // fall through
          case 50: break;
          case 21:
            { return symbol(TokenNames.TYPE_INT);
            }
            // fall through
          case 51: break;
          case 22:
            { return symbol(TokenNames.NEW);
            }
            // fall through
          case 52: break;
          case 23:
            { return symbol(TokenNames.NIL);
            }
            // fall through
          case 53: break;
          case 24:
            { return symbol(TokenNames.ERROR);
            }
            // fall through
          case 54: break;
          case 25:
            { return symbol(TokenNames.ARRAY);
            }
            // fall through
          case 55: break;
          case 26:
            { return symbol(TokenNames.CLASS);
            }
            // fall through
          case 56: break;
          case 27:
            { return symbol(TokenNames.WHILE);
            }
            // fall through
          case 57: break;
          case 28:
            { return symbol(TokenNames.RETURN);
            }
            // fall through
          case 58: break;
          case 29:
            { return symbol(TokenNames.TYPE_STRING);
            }
            // fall through
          case 59: break;
          case 30:
            { return symbol(TokenNames.EXTENDS);
            }
=======
          case 1: 
            { return symbol(TokenNames.ERROR);
            } 
            // fall through
          case 31: break;
          case 2: 
            { return symbol(TokenNames.SEMICOLON);
            } 
            // fall through
          case 32: break;
          case 3: 
            { return symbol(TokenNames.ID,     new String( yytext()));
            } 
            // fall through
          case 33: break;
          case 4: 
            { return symbol(TokenNames.EQ);
            } 
            // fall through
          case 34: break;
          case 5: 
            { return symbol(TokenNames.INT, new Integer(yytext()));
            } 
            // fall through
          case 35: break;
          case 6: 
            { return symbol(TokenNames.DOT);
            } 
            // fall through
          case 36: break;
          case 7: 
            { return symbol(TokenNames.IGNORE);
            } 
            // fall through
          case 37: break;
          case 8: 
            { return symbol(TokenNames.RBRACE);
            } 
            // fall through
          case 38: break;
          case 9: 
            { return symbol(TokenNames.MINUS);
            } 
            // fall through
          case 39: break;
          case 10: 
            { return symbol(TokenNames.DIVIDE);
            } 
            // fall through
          case 40: break;
          case 11: 
            { return symbol(TokenNames.TIMES);
            } 
            // fall through
          case 41: break;
          case 12: 
            { return symbol(TokenNames.LPAREN);
            } 
            // fall through
          case 42: break;
          case 13: 
            { return symbol(TokenNames.RPAREN);
            } 
            // fall through
          case 43: break;
          case 14: 
            { return symbol(TokenNames.LBRACE);
            } 
            // fall through
          case 44: break;
          case 15: 
            { return symbol(TokenNames.PLUS);
            } 
            // fall through
          case 45: break;
          case 16: 
            { return symbol(TokenNames.COMMA);
            } 
            // fall through
          case 46: break;
          case 17: 
            { return symbol(TokenNames.LT);
            } 
            // fall through
          case 47: break;
          case 18: 
            { return symbol(TokenNames.GT);
            } 
            // fall through
          case 48: break;
          case 19: 
            { return symbol(TokenNames.IF);
            } 
            // fall through
          case 49: break;
          case 20: 
            { return symbol(TokenNames.ASSIGN);
            } 
            // fall through
          case 50: break;
          case 21: 
            { return symbol(TokenNames.STRING, new String(yytext()));
            } 
            // fall through
          case 51: break;
          case 22: 
            { return symbol(TokenNames.TYPE_INT);
            } 
            // fall through
          case 52: break;
          case 23: 
            { return symbol(TokenNames.NIL);
            } 
            // fall through
          case 53: break;
          case 24: 
            { return symbol(TokenNames.NEW);
            } 
            // fall through
          case 54: break;
          case 25: 
            { return symbol(TokenNames.ARRAY);
            } 
            // fall through
          case 55: break;
          case 26: 
            { return symbol(TokenNames.CLASS);
            } 
            // fall through
          case 56: break;
          case 27: 
            { return symbol(TokenNames.WHILE);
            } 
            // fall through
          case 57: break;
          case 28: 
            { return symbol(TokenNames.TYPE_STRING);
            } 
            // fall through
          case 58: break;
          case 29: 
            { return symbol(TokenNames.RETURN);
            } 
            // fall through
          case 59: break;
          case 30: 
            { return symbol(TokenNames.EXTENDS);
            } 
>>>>>>> 31051d627bbe48e58788b4237ae11e1f632a87ba
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
